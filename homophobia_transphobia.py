# -*- coding: utf-8 -*-
"""Homophobia/Transphobia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7wJzocBWYKSGzz1AmBodmjWrqin0gqN
"""

# !jupyter nbconvert --to script Homophobia/Transphobia.ipynb

# Fist install the library and download the models from github

!pip install transformers
!pip install sentencepiece
# Commented out IPython magic to ensure Python compatibility.
from transformers import (
   AutoConfig,
   AutoTokenizer,
   TFAutoModelForSequenceClassification,
   AdamW,
   glue_convert_examples_to_features
)
import tensorflow as tf
import tensorflow_datasets as tfds
import json
import transformers
from transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup
import torch
import numpy as np
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from collections import defaultdict
from textwrap import wrap
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader
import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(train.Label)
plt.xlabel('label');
# %matplotlib inline
# %config InlineBackend.figure_format='retina'
sns.set(style='whitegrid', palette='muted', font_scale=1.2)
HAPPY_COLORS_PALETTE = ["#01BEFE", "#FFDD00", "#FF7D00", "#FF006D", "#ADFF02", "#8F00FF"]
sns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))
rcParams['figure.figsize'] = 12, 8
# RANDOM_SEED = 42
# np.random.seed(RANDOM_SEED)
# torch.manual_seed(RANDOM_SEED)
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
from tensorflow.python.client import device_lib
device_lib.list_local_devices()

from sklearn import *

import pandas as pd

train = pd.read_csv("/content/eng-tam_3_train.tsv",sep = '\t')

# train.sample(30)

dev = pd.read_csv("/content/eng-tam_3_dev.tsv",sep = '\t')

train = pd.concat([train,dev],axis=0)

actual_test = pd.read_csv("/content/Tamil-English-test-without-labels.tsv",sep = '\t')

# actual_test.head()

actual_test = actual_test.iloc[:, 0:1]

actual_test.columns = ['Text']

# actual_test.head()



train = train.iloc[:, 0:2]

# train.head()

"""eng_tam:cardiffnlp/twitter-roberta-base-sentiment

tam:monsoon-nlp/tamillion
"""

from transformers import BertModel
model = BertModel.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment')

from transformers import AutoTokenizer, AutoModel

# model = AutoModel.from_pretrained("ai4bharat/indic-bert")

# train.head()

calss_name = train['category'].unique()

# calss_name

# train.head()

# train.drop(columns = ['sno','id','keyword','country_code'],inplace=True)

# train.shape

train.columns = ['Label','Text']

# from sklearn.preprocessing import LabelEncoder
# labelencoder = LabelEncoder()
# train['Label'] = labelencoder.fit_transform(train['Label'])

train = train.dropna()





model_name = 'cardiffnlp/twitter-roberta-base-sentiment'
tokenizer = AutoTokenizer.from_pretrained(model_name, truncation=True)

import tokenizers

token_lens = []

for txt in train.Text:
  tokens = tokenizer.encode(txt, max_length=512)
  token_lens.append(len(tokens))

sns.distplot(token_lens)
plt.xlim([0, 200]);
plt.xlabel('Token count');

MAX_LEN = 64

class GPReviewDataset(Dataset):
  def __init__(self, Text, Label, tokenizer, max_len):
    self.Text = Text
    self.Label = Label
    self.tokenizer = tokenizer
    self.max_len = max_len
  def __len__(self):
    return len(self.Text)
  def __getitem__(self, item):
    Text = str(self.Text[item])
    Label = self.Label[item]
    encoding = self.tokenizer.encode_plus(
      Text,
      add_special_tokens=True,
      max_length=self.max_len,
      return_token_type_ids=False,
      pad_to_max_length=True,
      return_attention_mask=True,
      return_tensors='pt',
    )
    return {
      'text': Text,
      'input_ids': encoding['input_ids'].flatten(),
      'attention_mask': encoding['attention_mask'].flatten(),
      'Label': torch.tensor(Label, dtype=torch.long)
    }

from collections import Counter

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

train['Label'] = le.fit_transform(train['Label'])

df_train, df_test = train_test_split(
  train,
  test_size=0.25,
  stratify = train.Label.values,
  random_state=42
)
df_val, df_test = train_test_split(
  df_test,
  test_size=0.5,
  stratify = df_test.Label.values,
  random_state=42
)
# df_train.shape, df_val.shape, df_test.shape
#
# df_test

def create_data_loader(df, tokenizer, max_len, batch_size):
  ds = GPReviewDataset(
    Text=df.Text.to_numpy(),
    Label=df.Label.to_numpy(),
    tokenizer=tokenizer,
    max_len=max_len
  )
  return DataLoader(
    ds,
    batch_size=batch_size,
    num_workers=4
  )

BATCH_SIZE = 8
train_data_loader = create_data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)
val_data_loader = create_data_loader(df_val, tokenizer, MAX_LEN, BATCH_SIZE)
test_data_loader = create_data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)

# data = next(iter(train_data_loader))
# data.keys()
#
# data = next(iter(train_data_loader))
# data.keys()
# print(data['input_ids'].shape)
# print(data['attention_mask'].shape)
# print(data['Label'].shape)

class SentimentClassifier(nn.Module):
  def __init__(self, n_classes):
    super(SentimentClassifier, self).__init__()
    self.bert = AutoModel.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment')
    self.drop = nn.Dropout(p=0.3)
    self.out = nn.Linear(self.bert.config.hidden_size, n_classes)
  def forward(self, input_ids, attention_mask):
    _, pooled_output = self.bert(
      input_ids=input_ids,
      attention_mask=attention_mask,
      return_dict=False
    )
    output = self.drop(pooled_output)
    return self.out(output)

n_classes = 3
class_names =le.classes_

# len(class_names)

modell = SentimentClassifier(len(class_names))
modell = modell.to(device)

# input_ids = data['input_ids'].to(device)
# attention_mask = data['attention_mask'].to(device)
# print(input_ids.shape) # batch size x seq length
# print(attention_mask.shape) # batch size x seq length

EPOCHS = 5
optimizer = AdamW(modell.parameters(), lr=2e-5, correct_bias=True)
total_steps = len(train_data_loader) * EPOCHS
scheduler = get_linear_schedule_with_warmup(
  optimizer,
  num_warmup_steps=0,
  num_training_steps=total_steps
)

from sklearn.utils import class_weight
class_weights = class_weight.compute_class_weight(
                                        class_weight = "balanced",
                                        classes = np.unique(train.Label.values),
                                        y = train.Label.values
                                    )
weights={}
for index, weight in enumerate(class_weights) :
  weights[index]=weight

# weights

# nn.CrossEntropyLoss(weight = torch.FloatTensor([1.8820861678004535, 0.4350104821802935, 5.886524822695035]))

loss_fn = nn.CrossEntropyLoss(weight = torch.FloatTensor([4.267020335985853, 0.3741955493525626, 10.724444444444444])).to(device)

def train_epoch(
  modell,
  data_loader,
  loss_fn,
  optimizer,
  device,
  scheduler,
  n_examples):
  modell = modell.train()
  losses = []
  correct_predictions = 0
  for d in data_loader:
    input_ids = d["input_ids"].to(device)
    attention_mask = d["attention_mask"].to(device)
    Label = d["Label"].to(device)
    outputs = modell(
      input_ids=input_ids,
      attention_mask=attention_mask
    )
    _, preds = torch.max(outputs, dim=1)
    loss = loss_fn(outputs, Label)
    correct_predictions += torch.sum(preds == Label)
    losses.append(loss.item())
    loss.backward()
    nn.utils.clip_grad_norm_(modell.parameters(), max_norm=1.0)
    optimizer.step()
    scheduler.step()
    optimizer.zero_grad()
  return correct_predictions.double() / n_examples, np.mean(losses)

def eval_model(modell, data_loader, loss_fn, device, n_examples):
  modell = modell.eval()
  losses = []
  correct_predictions = 0
  with torch.no_grad():
    for d in data_loader:
      input_ids = d["input_ids"].to(device)
      attention_mask = d["attention_mask"].to(device)
      Label = d["Label"].to(device)
      outputs = modell(
        input_ids=input_ids,
        attention_mask=attention_mask
      )
      _, preds = torch.max(outputs, dim=1)
      loss = loss_fn(outputs, Label)
      correct_predictions += torch.sum(preds == Label)
      losses.append(loss.item())
  return correct_predictions.double() / n_examples, np.mean(losses),

# Commented out IPython magic to ensure Python compatibility.
#
# %%time
# history = defaultdict(list)
# best_accuracy = 0
# for epoch in range(8):
#   print(f'Epoch {epoch + 1}/{EPOCHS}')
#   print('-' * 10)
#   train_acc, train_loss = train_epoch(
#     modell,
#     train_data_loader,
#     loss_fn,
#     optimizer,
#     device,
#     scheduler,
#     len(df_train)
#   )
#   print(f'Train loss {train_loss} accuracy {train_acc}')
#   val_acc, val_loss = eval_model(
#     modell,
#     val_data_loader,
#     loss_fn,
#     device,
#     len(df_val)
#   )
#   print(f'Val   loss {val_loss} accuracy {val_acc}')
#   print()
#   history['train_acc'].append(train_acc)
#   history['train_loss'].append(train_loss)
#   history['val_acc'].append(val_acc)
#   history['val_loss'].append(val_loss)
#   if val_acc > best_accuracy:
#     torch.save(modell.state_dict(), 'best_model_state.bin')
#     best_accuracy = val_acc



test_acc, _ = eval_model(
  modell,
  test_data_loader,
  loss_fn,
  device,
  len(df_test)
)
test_acc.item()

actual_test.head()

actual_test['ID'] = list(range(actual_test.shape[0]))

# actual_test.columns = ['ID','Text']

class GPReviewDataset_Beta(Dataset):
  def __init__(self, Text, ID, tokenizer, max_len):
    self.Text = Text
    self.ID = ID
    self.tokenizer = tokenizer
    self.max_len = max_len
  def __len__(self):
    return len(self.Text)
  def __getitem__(self, item):
    Text = str(self.Text[item])
    ID = str(self.ID[item])
    # Label = self.Label[item]
    encoding = self.tokenizer.encode_plus(
      Text,
      add_special_tokens=True,
      max_length=self.max_len,
      return_token_type_ids=False,
      pad_to_max_length=True,
      return_attention_mask=True,
      return_tensors='pt',
    )
    return {
      'text': Text,
      'input_ids': encoding['input_ids'].flatten(),
      'attention_mask': encoding['attention_mask'].flatten(),
      'ID': ID
      # 'Label': torch.tensor(Label, dtype=torch.long)
    }

def create_data_loader(df, tokenizer, max_len, batch_size):
  ds = GPReviewDataset_Beta(
    Text=df.Text.to_numpy(),
    ID=df.ID.to_numpy(),
    tokenizer=tokenizer,
    max_len=max_len
  )
  return DataLoader(
    ds,
    batch_size=batch_size,
    num_workers=4
  )

# BATCH_SIZE = 128
actual_test_data_loader = create_data_loader(actual_test, tokenizer, MAX_LEN, BATCH_SIZE)

data = next(iter(actual_test_data_loader))
data.keys()
print(data['input_ids'].shape)
print(data['attention_mask'].shape)
# print(data['Label'].shape)





def get_predictions(model, data_loader):
  model = model.eval()

  id = []
  predictions = []
  prediction_probs = []
  # real_values = []

  with torch.no_grad():
    for d in data_loader:

      # texts = d["Text"]
      input_ids = d["input_ids"].to(device)
      attention_mask = d["attention_mask"].to(device)
      # targets = d["Label"].to(device)

      outputs = model(
        input_ids=input_ids,
        attention_mask=attention_mask
      )
      _, preds = torch.max(outputs, dim=1)
      ids = d['ID']
      # probs = F.softmax(outputs, dim=1)

      # review_texts.extend(texts)
      predictions.extend(preds)
      id.extend(ids)
      # prediction_probs.extend(probs)
      # real_values.extend(targets)

  predictions = torch.stack(predictions).cpu()
  idss = id
  # prediction_probs = torch.stack(prediction_probs).cpu()
  # real_values = torch.stack(real_values).cpu()
  return idss,predictions

idss,y_pred = get_predictions(
  modell,
  actual_test_data_loader
)

sub_s1 = pd.DataFrame(zip(idss,y_pred),columns = ['id','prediction'])

# sub_s1.head()

sub_s1['prediction']= sub_s1['prediction'].apply(lambda x:x.item())

# sub_s1.head()



sub_s1.columns = ['pid','class_label']

sub_s1['class_label'] = le.inverse_transform(sub_s1['class_label'])

# sub_s1.sample(30)

sub_s1.to_csv('niksss_Tam_Eng.tsv',index=False, sep="\t")
